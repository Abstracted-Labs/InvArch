
//! Autogenerated weights for `pallet_inv4`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-30, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Gabriels-MacBook-Pro-3.local`, CPU: `<UNKNOWN>`
//! EXECUTION: `Some(Wasm)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
    // ./target/release/tinkernet-collator
    // benchmark
    // pallet
    // --chain=dev
    // --execution=wasm
    // --wasm-execution=compiled
    // --pallet=pallet_inv4
    // --extrinsic=*
    // --steps
    // 50
    // --repeat
    // 20
    // --output=../../InvArch-Frames/INV4/pallet-inv4/src/weights.rs
    // --template=../weights-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_inv4`.
pub trait WeightInfo {
	  fn create_core(m: u32, ) -> Weight;
	  fn set_parameters(m: u32, ) -> Weight;
	  fn token_mint() -> Weight;
	  fn token_burn() -> Weight;
	  fn operate_multisig(m: u32, z: u32, ) -> Weight;
	  fn vote_multisig() -> Weight;
	  fn withdraw_vote_multisig() -> Weight;
	  fn cancel_multisig_proposal() -> Weight;
  }

  /// Weights for `pallet_inv4` using the Substrate node and recommended hardware.
  pub struct SubstrateWeight<T>(PhantomData<T>);
          impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	            /// Storage: INV4 NextCoreId (r:1 w:1)
	            /// Proof: INV4 NextCoreId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	            /// Storage: CoreAssets Accounts (r:1 w:1)
	            /// Proof: CoreAssets Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	            /// Storage: CoreAssets TotalIssuance (r:1 w:1)
	            /// Proof: CoreAssets TotalIssuance (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	            /// Storage: System Account (r:2 w:2)
	            /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	            /// Storage: INV4 CoreByAccount (r:0 w:1)
	            /// Proof: INV4 CoreByAccount (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	            /// Storage: INV4 CoreStorage (r:0 w:1)
	            /// Proof: INV4 CoreStorage (max_values: None, max_size: Some(10063), added: 12538, mode: MaxEncodedLen)
	            /// Storage: INV4 CoreMembers (r:0 w:1)
	            /// Proof: INV4 CoreMembers (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	            /// The range of component `m` is `[0, 10000]`.
	        fn create_core(m: u32, ) -> Weight {
		      // Proof Size summary in bytes:
		      //  Measured:  `273`
		      //  Estimated: `6196`
		      // Minimum execution time: 84_000_000 picoseconds.
		      Weight::from_parts(85_462_672, 6196)
			        // Standard Error: 16
			        .saturating_add(Weight::from_parts(781, 0).saturating_mul(m.into()))
			        .saturating_add(T::DbWeight::get().reads(5_u64))
			        .saturating_add(T::DbWeight::get().writes(8_u64))
	        }
	            /// Storage: INV4 CoreStorage (r:1 w:1)
	            /// Proof: INV4 CoreStorage (max_values: None, max_size: Some(10063), added: 12538, mode: MaxEncodedLen)
	            /// The range of component `m` is `[0, 10000]`.
	        fn set_parameters(m: u32, ) -> Weight {
		      // Proof Size summary in bytes:
		      //  Measured:  `234`
		      //  Estimated: `13528`
		      // Minimum execution time: 11_000_000 picoseconds.
		      Weight::from_parts(12_279_117, 13528)
			        // Standard Error: 6
			        .saturating_add(Weight::from_parts(717, 0).saturating_mul(m.into()))
			        .saturating_add(T::DbWeight::get().reads(1_u64))
			        .saturating_add(T::DbWeight::get().writes(1_u64))
	        }
	            /// Storage: CoreAssets Accounts (r:1 w:1)
	            /// Proof: CoreAssets Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	            /// Storage: CoreAssets TotalIssuance (r:1 w:1)
	            /// Proof: CoreAssets TotalIssuance (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	            /// Storage: System Account (r:1 w:1)
	            /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	            /// Storage: INV4 CoreMembers (r:0 w:1)
	            /// Proof: INV4 CoreMembers (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	        fn token_mint() -> Weight {
		      // Proof Size summary in bytes:
		      //  Measured:  `246`
		      //  Estimated: `3593`
		      // Minimum execution time: 34_000_000 picoseconds.
		      Weight::from_parts(35_000_000, 3593)
			        .saturating_add(T::DbWeight::get().reads(3_u64))
			        .saturating_add(T::DbWeight::get().writes(4_u64))
	        }
	            /// Storage: CoreAssets Accounts (r:1 w:1)
	            /// Proof: CoreAssets Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	            /// Storage: CoreAssets TotalIssuance (r:1 w:1)
	            /// Proof: CoreAssets TotalIssuance (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	            /// Storage: System Account (r:1 w:1)
	            /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	            /// Storage: INV4 CoreMembers (r:0 w:1)
	            /// Proof: INV4 CoreMembers (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	        fn token_burn() -> Weight {
		      // Proof Size summary in bytes:
		      //  Measured:  `438`
		      //  Estimated: `3593`
		      // Minimum execution time: 36_000_000 picoseconds.
		      Weight::from_parts(37_000_000, 3593)
			        .saturating_add(T::DbWeight::get().reads(3_u64))
			        .saturating_add(T::DbWeight::get().writes(4_u64))
	        }
	            /// Storage: CoreAssets Accounts (r:1 w:0)
	            /// Proof: CoreAssets Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	            /// Storage: INV4 CoreStorage (r:1 w:0)
	            /// Proof: INV4 CoreStorage (max_values: None, max_size: Some(10063), added: 12538, mode: MaxEncodedLen)
	            /// Storage: CoreAssets TotalIssuance (r:1 w:0)
	            /// Proof: CoreAssets TotalIssuance (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	            /// Storage: INV4 Multisig (r:1 w:1)
	            /// Proof: INV4 Multisig (max_values: None, max_size: Some(551342), added: 553817, mode: MaxEncodedLen)
	            /// The range of component `m` is `[0, 10000]`.
	            /// The range of component `z` is `[0, 51190]`.
	        fn operate_multisig(m: u32, z: u32, ) -> Weight {
		      // Proof Size summary in bytes:
		      //  Measured:  `498`
		      //  Estimated: `554807`
		      // Minimum execution time: 29_000_000 picoseconds.
		      Weight::from_parts(25_808_010, 554807)
			        // Standard Error: 21
			        .saturating_add(Weight::from_parts(313, 0).saturating_mul(m.into()))
			        // Standard Error: 4
			        .saturating_add(Weight::from_parts(1_643, 0).saturating_mul(z.into()))
			        .saturating_add(T::DbWeight::get().reads(4_u64))
			        .saturating_add(T::DbWeight::get().writes(1_u64))
	        }
	            /// Storage: INV4 Multisig (r:1 w:1)
	            /// Proof: INV4 Multisig (max_values: None, max_size: Some(551342), added: 553817, mode: MaxEncodedLen)
	            /// Storage: CoreAssets Accounts (r:1 w:0)
	            /// Proof: CoreAssets Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	            /// Storage: INV4 CoreStorage (r:1 w:0)
	            /// Proof: INV4 CoreStorage (max_values: None, max_size: Some(10063), added: 12538, mode: MaxEncodedLen)
	            /// Storage: CoreAssets TotalIssuance (r:1 w:0)
	            /// Proof: CoreAssets TotalIssuance (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	        fn vote_multisig() -> Weight {
		      // Proof Size summary in bytes:
		      //  Measured:  `749`
		      //  Estimated: `554807`
		      // Minimum execution time: 27_000_000 picoseconds.
		      Weight::from_parts(28_000_000, 554807)
			        .saturating_add(T::DbWeight::get().reads(4_u64))
			        .saturating_add(T::DbWeight::get().writes(1_u64))
	        }
	            /// Storage: INV4 Multisig (r:1 w:1)
	            /// Proof: INV4 Multisig (max_values: None, max_size: Some(551342), added: 553817, mode: MaxEncodedLen)
	        fn withdraw_vote_multisig() -> Weight {
		      // Proof Size summary in bytes:
		      //  Measured:  `445`
		      //  Estimated: `554807`
		      // Minimum execution time: 15_000_000 picoseconds.
		      Weight::from_parts(16_000_000, 554807)
			        .saturating_add(T::DbWeight::get().reads(1_u64))
			        .saturating_add(T::DbWeight::get().writes(1_u64))
	        }
	            /// Storage: INV4 Multisig (r:0 w:1)
	            /// Proof: INV4 Multisig (max_values: None, max_size: Some(551342), added: 553817, mode: MaxEncodedLen)
	        fn cancel_multisig_proposal() -> Weight {
		      // Proof Size summary in bytes:
		      //  Measured:  `0`
		      //  Estimated: `0`
		      // Minimum execution time: 8_000_000 picoseconds.
		      Weight::from_parts(9_000_000, 0)
			        .saturating_add(T::DbWeight::get().writes(1_u64))
	        }
  }

  // For backwards compatibility and tests.
  impl WeightInfo for () {
	        /// Storage: INV4 NextCoreId (r:1 w:1)
	        /// Proof: INV4 NextCoreId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	        /// Storage: CoreAssets Accounts (r:1 w:1)
	        /// Proof: CoreAssets Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	        /// Storage: CoreAssets TotalIssuance (r:1 w:1)
	        /// Proof: CoreAssets TotalIssuance (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	        /// Storage: System Account (r:2 w:2)
	        /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	        /// Storage: INV4 CoreByAccount (r:0 w:1)
	        /// Proof: INV4 CoreByAccount (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	        /// Storage: INV4 CoreStorage (r:0 w:1)
	        /// Proof: INV4 CoreStorage (max_values: None, max_size: Some(10063), added: 12538, mode: MaxEncodedLen)
	        /// Storage: INV4 CoreMembers (r:0 w:1)
	        /// Proof: INV4 CoreMembers (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	        /// The range of component `m` is `[0, 10000]`.
	    fn create_core(m: u32, ) -> Weight {
		  // Proof Size summary in bytes:
		  //  Measured:  `273`
		  //  Estimated: `6196`
		  // Minimum execution time: 84_000_000 picoseconds.
		  Weight::from_parts(85_462_672, 6196)
			    // Standard Error: 16
			    .saturating_add(Weight::from_parts(781, 0).saturating_mul(m.into()))
			    .saturating_add(RocksDbWeight::get().reads(5_u64))
			    .saturating_add(RocksDbWeight::get().writes(8_u64))
	    }
	        /// Storage: INV4 CoreStorage (r:1 w:1)
	        /// Proof: INV4 CoreStorage (max_values: None, max_size: Some(10063), added: 12538, mode: MaxEncodedLen)
	        /// The range of component `m` is `[0, 10000]`.
	    fn set_parameters(m: u32, ) -> Weight {
		  // Proof Size summary in bytes:
		  //  Measured:  `234`
		  //  Estimated: `13528`
		  // Minimum execution time: 11_000_000 picoseconds.
		  Weight::from_parts(12_279_117, 13528)
			    // Standard Error: 6
			    .saturating_add(Weight::from_parts(717, 0).saturating_mul(m.into()))
			    .saturating_add(RocksDbWeight::get().reads(1_u64))
			    .saturating_add(RocksDbWeight::get().writes(1_u64))
	    }
	        /// Storage: CoreAssets Accounts (r:1 w:1)
	        /// Proof: CoreAssets Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	        /// Storage: CoreAssets TotalIssuance (r:1 w:1)
	        /// Proof: CoreAssets TotalIssuance (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	        /// Storage: System Account (r:1 w:1)
	        /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	        /// Storage: INV4 CoreMembers (r:0 w:1)
	        /// Proof: INV4 CoreMembers (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	    fn token_mint() -> Weight {
		  // Proof Size summary in bytes:
		  //  Measured:  `246`
		  //  Estimated: `3593`
		  // Minimum execution time: 34_000_000 picoseconds.
		  Weight::from_parts(35_000_000, 3593)
			    .saturating_add(RocksDbWeight::get().reads(3_u64))
			    .saturating_add(RocksDbWeight::get().writes(4_u64))
	    }
	        /// Storage: CoreAssets Accounts (r:1 w:1)
	        /// Proof: CoreAssets Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	        /// Storage: CoreAssets TotalIssuance (r:1 w:1)
	        /// Proof: CoreAssets TotalIssuance (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	        /// Storage: System Account (r:1 w:1)
	        /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	        /// Storage: INV4 CoreMembers (r:0 w:1)
	        /// Proof: INV4 CoreMembers (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	    fn token_burn() -> Weight {
		  // Proof Size summary in bytes:
		  //  Measured:  `438`
		  //  Estimated: `3593`
		  // Minimum execution time: 36_000_000 picoseconds.
		  Weight::from_parts(37_000_000, 3593)
			    .saturating_add(RocksDbWeight::get().reads(3_u64))
			    .saturating_add(RocksDbWeight::get().writes(4_u64))
	    }
	        /// Storage: CoreAssets Accounts (r:1 w:0)
	        /// Proof: CoreAssets Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	        /// Storage: INV4 CoreStorage (r:1 w:0)
	        /// Proof: INV4 CoreStorage (max_values: None, max_size: Some(10063), added: 12538, mode: MaxEncodedLen)
	        /// Storage: CoreAssets TotalIssuance (r:1 w:0)
	        /// Proof: CoreAssets TotalIssuance (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	        /// Storage: INV4 Multisig (r:1 w:1)
	        /// Proof: INV4 Multisig (max_values: None, max_size: Some(551342), added: 553817, mode: MaxEncodedLen)
	        /// The range of component `m` is `[0, 10000]`.
	        /// The range of component `z` is `[0, 51190]`.
	    fn operate_multisig(m: u32, z: u32, ) -> Weight {
		  // Proof Size summary in bytes:
		  //  Measured:  `498`
		  //  Estimated: `554807`
		  // Minimum execution time: 29_000_000 picoseconds.
		  Weight::from_parts(25_808_010, 554807)
			    // Standard Error: 21
			    .saturating_add(Weight::from_parts(313, 0).saturating_mul(m.into()))
			    // Standard Error: 4
			    .saturating_add(Weight::from_parts(1_643, 0).saturating_mul(z.into()))
			    .saturating_add(RocksDbWeight::get().reads(4_u64))
			    .saturating_add(RocksDbWeight::get().writes(1_u64))
	    }
	        /// Storage: INV4 Multisig (r:1 w:1)
	        /// Proof: INV4 Multisig (max_values: None, max_size: Some(551342), added: 553817, mode: MaxEncodedLen)
	        /// Storage: CoreAssets Accounts (r:1 w:0)
	        /// Proof: CoreAssets Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	        /// Storage: INV4 CoreStorage (r:1 w:0)
	        /// Proof: INV4 CoreStorage (max_values: None, max_size: Some(10063), added: 12538, mode: MaxEncodedLen)
	        /// Storage: CoreAssets TotalIssuance (r:1 w:0)
	        /// Proof: CoreAssets TotalIssuance (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	    fn vote_multisig() -> Weight {
		  // Proof Size summary in bytes:
		  //  Measured:  `749`
		  //  Estimated: `554807`
		  // Minimum execution time: 27_000_000 picoseconds.
		  Weight::from_parts(28_000_000, 554807)
			    .saturating_add(RocksDbWeight::get().reads(4_u64))
			    .saturating_add(RocksDbWeight::get().writes(1_u64))
	    }
	        /// Storage: INV4 Multisig (r:1 w:1)
	        /// Proof: INV4 Multisig (max_values: None, max_size: Some(551342), added: 553817, mode: MaxEncodedLen)
	    fn withdraw_vote_multisig() -> Weight {
		  // Proof Size summary in bytes:
		  //  Measured:  `445`
		  //  Estimated: `554807`
		  // Minimum execution time: 15_000_000 picoseconds.
		  Weight::from_parts(16_000_000, 554807)
			    .saturating_add(RocksDbWeight::get().reads(1_u64))
			    .saturating_add(RocksDbWeight::get().writes(1_u64))
	    }
	        /// Storage: INV4 Multisig (r:0 w:1)
	        /// Proof: INV4 Multisig (max_values: None, max_size: Some(551342), added: 553817, mode: MaxEncodedLen)
	    fn cancel_multisig_proposal() -> Weight {
		  // Proof Size summary in bytes:
		  //  Measured:  `0`
		  //  Estimated: `0`
		  // Minimum execution time: 8_000_000 picoseconds.
		  Weight::from_parts(9_000_000, 0)
			    .saturating_add(RocksDbWeight::get().writes(1_u64))
	    }
  }
