
//! Autogenerated weights for `pallet_inv4`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-05-24, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `anny.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/tinkernet-collator
// benchmark
// pallet
// --chain=dev
// --wasm-execution=compiled
// --pallet=pallet_inv4
// --extrinsic=*
// --steps
// 50
// --repeat
// 20
// --output=../../InvArch-Frames/INV4/pallet-inv4/src/weights.rs
// --template=../weights-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_inv4`.
pub trait WeightInfo {
	fn create_core(m: u32, ) -> Weight;
	fn set_parameters(m: u32, ) -> Weight;
	fn token_mint() -> Weight;
	fn token_burn() -> Weight;
	fn operate_multisig(m: u32, z: u32, ) -> Weight;
	fn vote_multisig() -> Weight;
	fn withdraw_vote_multisig() -> Weight;
	fn cancel_multisig_proposal() -> Weight;
}

/// Weights for `pallet_inv4` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `INV4::NextCoreId` (r:1 w:1)
	/// Proof: `INV4::NextCoreId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
	/// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CoreAssets::Accounts` (r:1 w:1)
	/// Proof: `CoreAssets::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	/// Storage: `CoreAssets::TotalIssuance` (r:1 w:1)
	/// Proof: `CoreAssets::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `INV4::CoreByAccount` (r:0 w:1)
	/// Proof: `INV4::CoreByAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `INV4::CoreStorage` (r:0 w:1)
	/// Proof: `INV4::CoreStorage` (`max_values`: None, `max_size`: Some(10063), added: 12538, mode: `MaxEncodedLen`)
	/// Storage: `INV4::CoreMembers` (r:0 w:1)
	/// Proof: `INV4::CoreMembers` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[0, 10000]`.
	fn create_core(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `304`
		//  Estimated: `6196`
		// Minimum execution time: 61_000_000 picoseconds.
		Weight::from_parts(61_957_455, 6196)
			// Standard Error: 17
			.saturating_add(Weight::from_parts(769, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	/// Storage: `INV4::CoreStorage` (r:1 w:1)
	/// Proof: `INV4::CoreStorage` (`max_values`: None, `max_size`: Some(10063), added: 12538, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[0, 10000]`.
	fn set_parameters(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `234`
		//  Estimated: `13528`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(8_995_089, 13528)
			// Standard Error: 5
			.saturating_add(Weight::from_parts(684, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CoreAssets::Accounts` (r:1 w:1)
	/// Proof: `CoreAssets::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	/// Storage: `CoreAssets::TotalIssuance` (r:1 w:1)
	/// Proof: `CoreAssets::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `INV4::CoreMembers` (r:0 w:1)
	/// Proof: `INV4::CoreMembers` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	fn token_mint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `246`
		//  Estimated: `3593`
		// Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(26_000_000, 3593)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `CoreAssets::Accounts` (r:1 w:1)
	/// Proof: `CoreAssets::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	/// Storage: `CoreAssets::TotalIssuance` (r:1 w:1)
	/// Proof: `CoreAssets::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `INV4::CoreMembers` (r:0 w:1)
	/// Proof: `INV4::CoreMembers` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	fn token_burn() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `438`
		//  Estimated: `3593`
		// Minimum execution time: 27_000_000 picoseconds.
		Weight::from_parts(28_000_000, 3593)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `CoreAssets::Accounts` (r:1 w:0)
	/// Proof: `CoreAssets::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	/// Storage: `INV4::CoreStorage` (r:1 w:0)
	/// Proof: `INV4::CoreStorage` (`max_values`: None, `max_size`: Some(10063), added: 12538, mode: `MaxEncodedLen`)
	/// Storage: `CoreAssets::TotalIssuance` (r:1 w:0)
	/// Proof: `CoreAssets::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `INV4::Multisig` (r:1 w:1)
	/// Proof: `INV4::Multisig` (`max_values`: None, `max_size`: Some(551342), added: 553817, mode: `MaxEncodedLen`)
	/// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
	/// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[0, 10000]`.
	/// The range of component `z` is `[0, 51190]`.
	fn operate_multisig(m: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `529`
		//  Estimated: `554807`
		// Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(21_624_412, 554807)
			// Standard Error: 15
			.saturating_add(Weight::from_parts(397, 0).saturating_mul(m.into()))
			// Standard Error: 3
			.saturating_add(Weight::from_parts(1_514, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `INV4::Multisig` (r:1 w:1)
	/// Proof: `INV4::Multisig` (`max_values`: None, `max_size`: Some(551342), added: 553817, mode: `MaxEncodedLen`)
	/// Storage: `CoreAssets::Accounts` (r:1 w:0)
	/// Proof: `CoreAssets::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	/// Storage: `INV4::CoreStorage` (r:1 w:0)
	/// Proof: `INV4::CoreStorage` (`max_values`: None, `max_size`: Some(10063), added: 12538, mode: `MaxEncodedLen`)
	/// Storage: `CoreAssets::TotalIssuance` (r:1 w:0)
	/// Proof: `CoreAssets::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
	/// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn vote_multisig() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `780`
		//  Estimated: `554807`
		// Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(26_000_000, 554807)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `INV4::Multisig` (r:1 w:1)
	/// Proof: `INV4::Multisig` (`max_values`: None, `max_size`: Some(551342), added: 553817, mode: `MaxEncodedLen`)
	/// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
	/// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn withdraw_vote_multisig() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `514`
		//  Estimated: `554807`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(14_000_000, 554807)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `INV4::Multisig` (r:0 w:1)
	/// Proof: `INV4::Multisig` (`max_values`: None, `max_size`: Some(551342), added: 553817, mode: `MaxEncodedLen`)
	fn cancel_multisig_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(7_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `INV4::NextCoreId` (r:1 w:1)
	/// Proof: `INV4::NextCoreId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
	/// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CoreAssets::Accounts` (r:1 w:1)
	/// Proof: `CoreAssets::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	/// Storage: `CoreAssets::TotalIssuance` (r:1 w:1)
	/// Proof: `CoreAssets::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `INV4::CoreByAccount` (r:0 w:1)
	/// Proof: `INV4::CoreByAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `INV4::CoreStorage` (r:0 w:1)
	/// Proof: `INV4::CoreStorage` (`max_values`: None, `max_size`: Some(10063), added: 12538, mode: `MaxEncodedLen`)
	/// Storage: `INV4::CoreMembers` (r:0 w:1)
	/// Proof: `INV4::CoreMembers` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[0, 10000]`.
	fn create_core(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `304`
		//  Estimated: `6196`
		// Minimum execution time: 61_000_000 picoseconds.
		Weight::from_parts(61_957_455, 6196)
			// Standard Error: 17
			.saturating_add(Weight::from_parts(769, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
	}
	/// Storage: `INV4::CoreStorage` (r:1 w:1)
	/// Proof: `INV4::CoreStorage` (`max_values`: None, `max_size`: Some(10063), added: 12538, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[0, 10000]`.
	fn set_parameters(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `234`
		//  Estimated: `13528`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(8_995_089, 13528)
			// Standard Error: 5
			.saturating_add(Weight::from_parts(684, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CoreAssets::Accounts` (r:1 w:1)
	/// Proof: `CoreAssets::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	/// Storage: `CoreAssets::TotalIssuance` (r:1 w:1)
	/// Proof: `CoreAssets::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `INV4::CoreMembers` (r:0 w:1)
	/// Proof: `INV4::CoreMembers` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	fn token_mint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `246`
		//  Estimated: `3593`
		// Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(26_000_000, 3593)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `CoreAssets::Accounts` (r:1 w:1)
	/// Proof: `CoreAssets::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	/// Storage: `CoreAssets::TotalIssuance` (r:1 w:1)
	/// Proof: `CoreAssets::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `INV4::CoreMembers` (r:0 w:1)
	/// Proof: `INV4::CoreMembers` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	fn token_burn() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `438`
		//  Estimated: `3593`
		// Minimum execution time: 27_000_000 picoseconds.
		Weight::from_parts(28_000_000, 3593)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `CoreAssets::Accounts` (r:1 w:0)
	/// Proof: `CoreAssets::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	/// Storage: `INV4::CoreStorage` (r:1 w:0)
	/// Proof: `INV4::CoreStorage` (`max_values`: None, `max_size`: Some(10063), added: 12538, mode: `MaxEncodedLen`)
	/// Storage: `CoreAssets::TotalIssuance` (r:1 w:0)
	/// Proof: `CoreAssets::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `INV4::Multisig` (r:1 w:1)
	/// Proof: `INV4::Multisig` (`max_values`: None, `max_size`: Some(551342), added: 553817, mode: `MaxEncodedLen`)
	/// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
	/// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[0, 10000]`.
	/// The range of component `z` is `[0, 51190]`.
	fn operate_multisig(m: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `529`
		//  Estimated: `554807`
		// Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(21_624_412, 554807)
			// Standard Error: 15
			.saturating_add(Weight::from_parts(397, 0).saturating_mul(m.into()))
			// Standard Error: 3
			.saturating_add(Weight::from_parts(1_514, 0).saturating_mul(z.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `INV4::Multisig` (r:1 w:1)
	/// Proof: `INV4::Multisig` (`max_values`: None, `max_size`: Some(551342), added: 553817, mode: `MaxEncodedLen`)
	/// Storage: `CoreAssets::Accounts` (r:1 w:0)
	/// Proof: `CoreAssets::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	/// Storage: `INV4::CoreStorage` (r:1 w:0)
	/// Proof: `INV4::CoreStorage` (`max_values`: None, `max_size`: Some(10063), added: 12538, mode: `MaxEncodedLen`)
	/// Storage: `CoreAssets::TotalIssuance` (r:1 w:0)
	/// Proof: `CoreAssets::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
	/// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn vote_multisig() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `780`
		//  Estimated: `554807`
		// Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(26_000_000, 554807)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `INV4::Multisig` (r:1 w:1)
	/// Proof: `INV4::Multisig` (`max_values`: None, `max_size`: Some(551342), added: 553817, mode: `MaxEncodedLen`)
	/// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
	/// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn withdraw_vote_multisig() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `514`
		//  Estimated: `554807`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(14_000_000, 554807)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `INV4::Multisig` (r:0 w:1)
	/// Proof: `INV4::Multisig` (`max_values`: None, `max_size`: Some(551342), added: 553817, mode: `MaxEncodedLen`)
	fn cancel_multisig_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(7_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
