//! Autogenerated weights for pallet_inv4
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-16, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Gabriels-MacBook-Pro-3.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
    // ./target/release/invarch-collator
    // benchmark
    // pallet
    // --chain=dev
    // --execution=wasm
    // --wasm-execution=compiled
    // --pallet=pallet_inv4
    // --extrinsic=*
    // --steps
    // 50
    // --repeat
    // 20
    // --output=../InvArch-Frames/INV4/pallet-inv4/src/weights.rs
    // --template=weights-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_inv4.
pub trait WeightInfo {
	  fn create_core(m: u32, ) -> Weight;
	  fn set_parameters(m: u32, ) -> Weight;
	  fn token_mint() -> Weight;
	  fn token_burn() -> Weight;
	  fn operate_multisig(m: u32, z: u32, ) -> Weight;
	  fn vote_multisig() -> Weight;
	  fn withdraw_vote_multisig() -> Weight;
	  fn cancel_multisig_proposal() -> Weight;
  }

  /// Weights for pallet_inv4 using the Substrate node and recommended hardware.
  pub struct SubstrateWeight<T>(PhantomData<T>);
          impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	            // Storage: INV4 NextCoreId (r:1 w:1)
	            // Storage: CoreAssets Accounts (r:1 w:1)
	            // Storage: CoreAssets TotalIssuance (r:1 w:1)
	            // Storage: System Account (r:2 w:2)
	            // Storage: INV4 CoreByAccount (r:0 w:1)
	            // Storage: INV4 CoreStorage (r:0 w:1)
	            // Storage: INV4 CoreMembers (r:0 w:1)
	            /// The range of component `m` is `[0, 10000]`.
	        fn create_core(m: u32, ) -> Weight {
		      // Minimum execution time: 78_000 nanoseconds.
		      Weight::from_ref_time(79_237_712)
			        // Standard Error: 11
			        .saturating_add(Weight::from_ref_time(772).saturating_mul(m.into()))
			        .saturating_add(T::DbWeight::get().reads(5))
			        .saturating_add(T::DbWeight::get().writes(8))
	        }
	            // Storage: INV4 CoreStorage (r:1 w:1)
	            /// The range of component `m` is `[0, 10000]`.
	        fn set_parameters(m: u32, ) -> Weight {
		      // Minimum execution time: 17_000 nanoseconds.
		      Weight::from_ref_time(18_397_028)
			        // Standard Error: 6
			        .saturating_add(Weight::from_ref_time(805).saturating_mul(m.into()))
			        .saturating_add(T::DbWeight::get().reads(1))
			        .saturating_add(T::DbWeight::get().writes(1))
	        }
	            // Storage: CoreAssets Accounts (r:1 w:1)
	            // Storage: CoreAssets TotalIssuance (r:1 w:1)
	            // Storage: System Account (r:1 w:1)
	            // Storage: INV4 CoreMembers (r:0 w:1)
	        fn token_mint() -> Weight {
		      // Minimum execution time: 38_000 nanoseconds.
		      Weight::from_ref_time(39_000_000)
			        .saturating_add(T::DbWeight::get().reads(3))
			        .saturating_add(T::DbWeight::get().writes(4))
	        }
	            // Storage: CoreAssets Accounts (r:1 w:1)
	            // Storage: CoreAssets TotalIssuance (r:1 w:1)
	            // Storage: System Account (r:1 w:1)
	            // Storage: INV4 CoreMembers (r:0 w:1)
	        fn token_burn() -> Weight {
		      // Minimum execution time: 40_000 nanoseconds.
		      Weight::from_ref_time(40_000_000)
			        .saturating_add(T::DbWeight::get().reads(3))
			        .saturating_add(T::DbWeight::get().writes(4))
	        }
	            // Storage: CoreAssets Accounts (r:1 w:0)
	            // Storage: INV4 CoreStorage (r:1 w:0)
	            // Storage: CoreAssets TotalIssuance (r:1 w:0)
	            // Storage: INV4 Multisig (r:1 w:1)
	            /// The range of component `m` is `[0, 10000]`.
	            /// The range of component `z` is `[0, 4194294]`.
	        fn operate_multisig(_m: u32, z: u32, ) -> Weight {
		      // Minimum execution time: 35_000 nanoseconds.
		      Weight::from_ref_time(35_000_000)
			        // Standard Error: 2
			        .saturating_add(Weight::from_ref_time(2_288).saturating_mul(z.into()))
			        .saturating_add(T::DbWeight::get().reads(4))
			        .saturating_add(T::DbWeight::get().writes(1))
	        }
	            // Storage: INV4 Multisig (r:1 w:1)
	            // Storage: CoreAssets Accounts (r:1 w:0)
	            // Storage: INV4 CoreStorage (r:1 w:0)
	            // Storage: CoreAssets TotalIssuance (r:1 w:0)
	        fn vote_multisig() -> Weight {
		      // Minimum execution time: 31_000 nanoseconds.
		      Weight::from_ref_time(32_000_000)
			        .saturating_add(T::DbWeight::get().reads(4))
			        .saturating_add(T::DbWeight::get().writes(1))
	        }
	            // Storage: INV4 Multisig (r:1 w:1)
	        fn withdraw_vote_multisig() -> Weight {
		      // Minimum execution time: 21_000 nanoseconds.
		      Weight::from_ref_time(23_000_000)
			        .saturating_add(T::DbWeight::get().reads(1))
			        .saturating_add(T::DbWeight::get().writes(1))
	        }
	            // Storage: INV4 Multisig (r:0 w:1)
	        fn cancel_multisig_proposal() -> Weight {
		      // Minimum execution time: 15_000 nanoseconds.
		      Weight::from_ref_time(16_000_000)
			        .saturating_add(T::DbWeight::get().writes(1))
	        }
  }

  // For backwards compatibility and tests
  impl WeightInfo for () {
	        // Storage: INV4 NextCoreId (r:1 w:1)
	        // Storage: CoreAssets Accounts (r:1 w:1)
	        // Storage: CoreAssets TotalIssuance (r:1 w:1)
	        // Storage: System Account (r:2 w:2)
	        // Storage: INV4 CoreByAccount (r:0 w:1)
	        // Storage: INV4 CoreStorage (r:0 w:1)
	        // Storage: INV4 CoreMembers (r:0 w:1)
	        /// The range of component `m` is `[0, 10000]`.
	    fn create_core(m: u32, ) -> Weight {
		  // Minimum execution time: 78_000 nanoseconds.
		  Weight::from_ref_time(79_237_712)
			    // Standard Error: 11
			    .saturating_add(Weight::from_ref_time(772).saturating_mul(m.into()))
			    .saturating_add(RocksDbWeight::get().reads(5))
			    .saturating_add(RocksDbWeight::get().writes(8))
	    }
	        // Storage: INV4 CoreStorage (r:1 w:1)
	        /// The range of component `m` is `[0, 10000]`.
	    fn set_parameters(m: u32, ) -> Weight {
		  // Minimum execution time: 17_000 nanoseconds.
		  Weight::from_ref_time(18_397_028)
			    // Standard Error: 6
			    .saturating_add(Weight::from_ref_time(805).saturating_mul(m.into()))
			    .saturating_add(RocksDbWeight::get().reads(1))
			    .saturating_add(RocksDbWeight::get().writes(1))
	    }
	        // Storage: CoreAssets Accounts (r:1 w:1)
	        // Storage: CoreAssets TotalIssuance (r:1 w:1)
	        // Storage: System Account (r:1 w:1)
	        // Storage: INV4 CoreMembers (r:0 w:1)
	    fn token_mint() -> Weight {
		  // Minimum execution time: 38_000 nanoseconds.
		  Weight::from_ref_time(39_000_000)
			    .saturating_add(RocksDbWeight::get().reads(3))
			    .saturating_add(RocksDbWeight::get().writes(4))
	    }
	        // Storage: CoreAssets Accounts (r:1 w:1)
	        // Storage: CoreAssets TotalIssuance (r:1 w:1)
	        // Storage: System Account (r:1 w:1)
	        // Storage: INV4 CoreMembers (r:0 w:1)
	    fn token_burn() -> Weight {
		  // Minimum execution time: 40_000 nanoseconds.
		  Weight::from_ref_time(40_000_000)
			    .saturating_add(RocksDbWeight::get().reads(3))
			    .saturating_add(RocksDbWeight::get().writes(4))
	    }
	        // Storage: CoreAssets Accounts (r:1 w:0)
	        // Storage: INV4 CoreStorage (r:1 w:0)
	        // Storage: CoreAssets TotalIssuance (r:1 w:0)
	        // Storage: INV4 Multisig (r:1 w:1)
	        /// The range of component `m` is `[0, 10000]`.
	        /// The range of component `z` is `[0, 4194294]`.
	    fn operate_multisig(_m: u32, z: u32, ) -> Weight {
		  // Minimum execution time: 35_000 nanoseconds.
		  Weight::from_ref_time(35_000_000)
			    // Standard Error: 2
			    .saturating_add(Weight::from_ref_time(2_288).saturating_mul(z.into()))
			    .saturating_add(RocksDbWeight::get().reads(4))
			    .saturating_add(RocksDbWeight::get().writes(1))
	    }
	        // Storage: INV4 Multisig (r:1 w:1)
	        // Storage: CoreAssets Accounts (r:1 w:0)
	        // Storage: INV4 CoreStorage (r:1 w:0)
	        // Storage: CoreAssets TotalIssuance (r:1 w:0)
	    fn vote_multisig() -> Weight {
		  // Minimum execution time: 31_000 nanoseconds.
		  Weight::from_ref_time(32_000_000)
			    .saturating_add(RocksDbWeight::get().reads(4))
			    .saturating_add(RocksDbWeight::get().writes(1))
	    }
	        // Storage: INV4 Multisig (r:1 w:1)
	    fn withdraw_vote_multisig() -> Weight {
		  // Minimum execution time: 21_000 nanoseconds.
		  Weight::from_ref_time(23_000_000)
			    .saturating_add(RocksDbWeight::get().reads(1))
			    .saturating_add(RocksDbWeight::get().writes(1))
	    }
	        // Storage: INV4 Multisig (r:0 w:1)
	    fn cancel_multisig_proposal() -> Weight {
		  // Minimum execution time: 15_000 nanoseconds.
		  Weight::from_ref_time(16_000_000)
			    .saturating_add(RocksDbWeight::get().writes(1))
	    }
  }
