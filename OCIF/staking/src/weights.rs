//! Autogenerated weights for pallet_ocif_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-19, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Gabriels-MacBook-Pro-3.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
    // ./target/release/invarch-collator
    // benchmark
    // pallet
    // --chain=dev
    // --execution=wasm
    // --wasm-execution=compiled
    // --pallet=pallet_ocif_staking
    // --extrinsic=*
    // --steps
    // 50
    // --repeat
    // 20
    // --heap-pages=4096
    // --output=../InvArch-Frames/OCIF/staking/src/weights.rs
    // --template=weights-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_ocif_staking.
pub trait WeightInfo {
	  fn register_core(n: u32, d: u32, i: u32, ) -> Weight;
	  fn change_core_metadata(n: u32, d: u32, i: u32, ) -> Weight;
	  fn unregister_core() -> Weight;
	  fn stake() -> Weight;
	  fn unstake() -> Weight;
	  fn withdraw_unstaked() -> Weight;
	  fn staker_claim_rewards() -> Weight;
	  fn core_claim_rewards() -> Weight;
	  fn halt_unhalt_pallet() -> Weight;
  }

  /// Weights for pallet_ocif_staking using the Substrate node and recommended hardware.
  pub struct SubstrateWeight<T>(PhantomData<T>);
          impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	            // Storage: OcifStaking Halted (r:1 w:0)
	            // Storage: OcifStaking RegisteredCore (r:1 w:1)
	            // Storage: System Account (r:1 w:1)
	            /// The range of component `n` is `[0, 20]`.
	            /// The range of component `d` is `[0, 300]`.
	            /// The range of component `i` is `[0, 100]`.
	        fn register_core(n: u32, d: u32, i: u32, ) -> Weight {
		      // Minimum execution time: 27_000 nanoseconds.
		      Weight::from_ref_time(28_038_128)
			        // Standard Error: 2_766
			        .saturating_add(Weight::from_ref_time(5_860).saturating_mul(n.into()))
			        // Standard Error: 189
			        .saturating_add(Weight::from_ref_time(1_698).saturating_mul(d.into()))
			        // Standard Error: 567
			        .saturating_add(Weight::from_ref_time(2_108).saturating_mul(i.into()))
			        .saturating_add(T::DbWeight::get().reads(3))
			        .saturating_add(T::DbWeight::get().writes(2))
	        }
	            // Storage: OcifStaking Halted (r:1 w:0)
	            // Storage: OcifStaking RegisteredCore (r:1 w:1)
	            /// The range of component `n` is `[0, 20]`.
	            /// The range of component `d` is `[0, 300]`.
	            /// The range of component `i` is `[0, 100]`.
	        fn change_core_metadata(n: u32, d: u32, _i: u32, ) -> Weight {
		      // Minimum execution time: 18_000 nanoseconds.
		      Weight::from_ref_time(19_044_429)
			        // Standard Error: 1_622
			        .saturating_add(Weight::from_ref_time(3_326).saturating_mul(n.into()))
			        // Standard Error: 111
			        .saturating_add(Weight::from_ref_time(159).saturating_mul(d.into()))
			        .saturating_add(T::DbWeight::get().reads(2))
			        .saturating_add(T::DbWeight::get().writes(1))
	        }
	            // Storage: OcifStaking Halted (r:1 w:0)
	            // Storage: OcifStaking RegisteredCore (r:1 w:1)
	            // Storage: OcifStaking CurrentEra (r:1 w:0)
	            // Storage: OcifStaking GeneralStakerInfo (r:1 w:0)
	            // Storage: System Account (r:1 w:1)
	        fn unregister_core() -> Weight {
		      // Minimum execution time: 33_000 nanoseconds.
		      Weight::from_ref_time(34_000_000)
			        .saturating_add(T::DbWeight::get().reads(5))
			        .saturating_add(T::DbWeight::get().writes(2))
	        }
	            // Storage: OcifStaking Halted (r:1 w:0)
	            // Storage: OcifStaking RegisteredCore (r:1 w:0)
	            // Storage: OcifStaking Ledger (r:1 w:1)
	            // Storage: OcifStaking CurrentEra (r:1 w:0)
	            // Storage: OcifStaking CoreEraStake (r:1 w:1)
	            // Storage: OcifStaking GeneralStakerInfo (r:1 w:1)
	            // Storage: OcifStaking GeneralEraInfo (r:1 w:1)
	            // Storage: Balances Locks (r:1 w:1)
	        fn stake() -> Weight {
		      // Minimum execution time: 44_000 nanoseconds.
		      Weight::from_ref_time(46_000_000)
			        .saturating_add(T::DbWeight::get().reads(8))
			        .saturating_add(T::DbWeight::get().writes(5))
	        }
	            // Storage: OcifStaking Halted (r:1 w:0)
	            // Storage: OcifStaking RegisteredCore (r:1 w:0)
	            // Storage: OcifStaking CurrentEra (r:1 w:0)
	            // Storage: OcifStaking GeneralStakerInfo (r:1 w:1)
	            // Storage: OcifStaking CoreEraStake (r:1 w:1)
	            // Storage: OcifStaking Ledger (r:1 w:1)
	            // Storage: Balances Locks (r:1 w:1)
	            // Storage: OcifStaking GeneralEraInfo (r:1 w:1)
	        fn unstake() -> Weight {
		      // Minimum execution time: 46_000 nanoseconds.
		      Weight::from_ref_time(46_000_000)
			        .saturating_add(T::DbWeight::get().reads(8))
			        .saturating_add(T::DbWeight::get().writes(5))
	        }
	            // Storage: OcifStaking Halted (r:1 w:0)
	            // Storage: OcifStaking Ledger (r:1 w:1)
	            // Storage: OcifStaking CurrentEra (r:1 w:0)
	            // Storage: Balances Locks (r:1 w:1)
	            // Storage: OcifStaking GeneralEraInfo (r:1 w:1)
	        fn withdraw_unstaked() -> Weight {
		      // Minimum execution time: 50_000 nanoseconds.
		      Weight::from_ref_time(67_000_000)
			        .saturating_add(T::DbWeight::get().reads(5))
			        .saturating_add(T::DbWeight::get().writes(3))
	        }
	            // Storage: OcifStaking Halted (r:1 w:0)
	            // Storage: OcifStaking GeneralStakerInfo (r:1 w:1)
	            // Storage: OcifStaking CurrentEra (r:1 w:0)
	            // Storage: OcifStaking CoreEraStake (r:1 w:0)
	            // Storage: OcifStaking GeneralEraInfo (r:1 w:0)
	        fn staker_claim_rewards() -> Weight {
		      // Minimum execution time: 30_000 nanoseconds.
		      Weight::from_ref_time(31_000_000)
			        .saturating_add(T::DbWeight::get().reads(5))
			        .saturating_add(T::DbWeight::get().writes(1))
	        }
	            // Storage: OcifStaking Halted (r:1 w:0)
	            // Storage: OcifStaking CurrentEra (r:1 w:0)
	            // Storage: OcifStaking CoreEraStake (r:1 w:1)
	            // Storage: OcifStaking GeneralEraInfo (r:1 w:0)
	        fn core_claim_rewards() -> Weight {
		      // Minimum execution time: 28_000 nanoseconds.
		      Weight::from_ref_time(29_000_000)
			        .saturating_add(T::DbWeight::get().reads(4))
			        .saturating_add(T::DbWeight::get().writes(1))
	        }
	            // Storage: OcifStaking Halted (r:1 w:1)
	        fn halt_unhalt_pallet() -> Weight {
		      // Minimum execution time: 14_000 nanoseconds.
		      Weight::from_ref_time(15_000_000)
			        .saturating_add(T::DbWeight::get().reads(1))
			        .saturating_add(T::DbWeight::get().writes(1))
	        }
  }

  // For backwards compatibility and tests
  impl WeightInfo for () {
	        // Storage: OcifStaking Halted (r:1 w:0)
	        // Storage: OcifStaking RegisteredCore (r:1 w:1)
	        // Storage: System Account (r:1 w:1)
	        /// The range of component `n` is `[0, 20]`.
	        /// The range of component `d` is `[0, 300]`.
	        /// The range of component `i` is `[0, 100]`.
	    fn register_core(n: u32, d: u32, i: u32, ) -> Weight {
		  // Minimum execution time: 27_000 nanoseconds.
		  Weight::from_ref_time(28_038_128)
			    // Standard Error: 2_766
			    .saturating_add(Weight::from_ref_time(5_860).saturating_mul(n.into()))
			    // Standard Error: 189
			    .saturating_add(Weight::from_ref_time(1_698).saturating_mul(d.into()))
			    // Standard Error: 567
			    .saturating_add(Weight::from_ref_time(2_108).saturating_mul(i.into()))
			    .saturating_add(RocksDbWeight::get().reads(3))
			    .saturating_add(RocksDbWeight::get().writes(2))
	    }
	        // Storage: OcifStaking Halted (r:1 w:0)
	        // Storage: OcifStaking RegisteredCore (r:1 w:1)
	        /// The range of component `n` is `[0, 20]`.
	        /// The range of component `d` is `[0, 300]`.
	        /// The range of component `i` is `[0, 100]`.
	    fn change_core_metadata(n: u32, d: u32, _i: u32, ) -> Weight {
		  // Minimum execution time: 18_000 nanoseconds.
		  Weight::from_ref_time(19_044_429)
			    // Standard Error: 1_622
			    .saturating_add(Weight::from_ref_time(3_326).saturating_mul(n.into()))
			    // Standard Error: 111
			    .saturating_add(Weight::from_ref_time(159).saturating_mul(d.into()))
			    .saturating_add(RocksDbWeight::get().reads(2))
			    .saturating_add(RocksDbWeight::get().writes(1))
	    }
	        // Storage: OcifStaking Halted (r:1 w:0)
	        // Storage: OcifStaking RegisteredCore (r:1 w:1)
	        // Storage: OcifStaking CurrentEra (r:1 w:0)
	        // Storage: OcifStaking GeneralStakerInfo (r:1 w:0)
	        // Storage: System Account (r:1 w:1)
	    fn unregister_core() -> Weight {
		  // Minimum execution time: 33_000 nanoseconds.
		  Weight::from_ref_time(34_000_000)
			    .saturating_add(RocksDbWeight::get().reads(5))
			    .saturating_add(RocksDbWeight::get().writes(2))
	    }
	        // Storage: OcifStaking Halted (r:1 w:0)
	        // Storage: OcifStaking RegisteredCore (r:1 w:0)
	        // Storage: OcifStaking Ledger (r:1 w:1)
	        // Storage: OcifStaking CurrentEra (r:1 w:0)
	        // Storage: OcifStaking CoreEraStake (r:1 w:1)
	        // Storage: OcifStaking GeneralStakerInfo (r:1 w:1)
	        // Storage: OcifStaking GeneralEraInfo (r:1 w:1)
	        // Storage: Balances Locks (r:1 w:1)
	    fn stake() -> Weight {
		  // Minimum execution time: 44_000 nanoseconds.
		  Weight::from_ref_time(46_000_000)
			    .saturating_add(RocksDbWeight::get().reads(8))
			    .saturating_add(RocksDbWeight::get().writes(5))
	    }
	        // Storage: OcifStaking Halted (r:1 w:0)
	        // Storage: OcifStaking RegisteredCore (r:1 w:0)
	        // Storage: OcifStaking CurrentEra (r:1 w:0)
	        // Storage: OcifStaking GeneralStakerInfo (r:1 w:1)
	        // Storage: OcifStaking CoreEraStake (r:1 w:1)
	        // Storage: OcifStaking Ledger (r:1 w:1)
	        // Storage: Balances Locks (r:1 w:1)
	        // Storage: OcifStaking GeneralEraInfo (r:1 w:1)
	    fn unstake() -> Weight {
		  // Minimum execution time: 46_000 nanoseconds.
		  Weight::from_ref_time(46_000_000)
			    .saturating_add(RocksDbWeight::get().reads(8))
			    .saturating_add(RocksDbWeight::get().writes(5))
	    }
	        // Storage: OcifStaking Halted (r:1 w:0)
	        // Storage: OcifStaking Ledger (r:1 w:1)
	        // Storage: OcifStaking CurrentEra (r:1 w:0)
	        // Storage: Balances Locks (r:1 w:1)
	        // Storage: OcifStaking GeneralEraInfo (r:1 w:1)
	    fn withdraw_unstaked() -> Weight {
		  // Minimum execution time: 50_000 nanoseconds.
		  Weight::from_ref_time(67_000_000)
			    .saturating_add(RocksDbWeight::get().reads(5))
			    .saturating_add(RocksDbWeight::get().writes(3))
	    }
	        // Storage: OcifStaking Halted (r:1 w:0)
	        // Storage: OcifStaking GeneralStakerInfo (r:1 w:1)
	        // Storage: OcifStaking CurrentEra (r:1 w:0)
	        // Storage: OcifStaking CoreEraStake (r:1 w:0)
	        // Storage: OcifStaking GeneralEraInfo (r:1 w:0)
	    fn staker_claim_rewards() -> Weight {
		  // Minimum execution time: 30_000 nanoseconds.
		  Weight::from_ref_time(31_000_000)
			    .saturating_add(RocksDbWeight::get().reads(5))
			    .saturating_add(RocksDbWeight::get().writes(1))
	    }
	        // Storage: OcifStaking Halted (r:1 w:0)
	        // Storage: OcifStaking CurrentEra (r:1 w:0)
	        // Storage: OcifStaking CoreEraStake (r:1 w:1)
	        // Storage: OcifStaking GeneralEraInfo (r:1 w:0)
	    fn core_claim_rewards() -> Weight {
		  // Minimum execution time: 28_000 nanoseconds.
		  Weight::from_ref_time(29_000_000)
			    .saturating_add(RocksDbWeight::get().reads(4))
			    .saturating_add(RocksDbWeight::get().writes(1))
	    }
	        // Storage: OcifStaking Halted (r:1 w:1)
	    fn halt_unhalt_pallet() -> Weight {
		  // Minimum execution time: 14_000 nanoseconds.
		  Weight::from_ref_time(15_000_000)
			    .saturating_add(RocksDbWeight::get().reads(1))
			    .saturating_add(RocksDbWeight::get().writes(1))
	    }
  }
