//! Autogenerated weights for pallet_rings
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-17, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Gabriels-MacBook-Pro-3.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
    // ./target/release/invarch-collator
    // benchmark
    // pallet
    // --chain=dev
    // --execution=wasm
    // --wasm-execution=compiled
    // --pallet=pallet_rings
    // --extrinsic=*
    // --steps
    // 50
    // --repeat
    // 20
    // --heap-pages=4096
    // --output=../InvArch-Frames/pallet-rings/src/weights.rs
    // --template=weights-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_rings.
pub trait WeightInfo {
	  fn send_call(c: u32, ) -> Weight;
	  fn transfer_assets() -> Weight;
  }

  /// Weights for pallet_rings using the Substrate node and recommended hardware.
  pub struct SubstrateWeight<T>(PhantomData<T>);
          impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	            // Storage: ParachainInfo ParachainId (r:1 w:0)
	            // Storage: ParachainSystem HostConfiguration (r:1 w:0)
	            // Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	            /// The range of component `c` is `[0, 100000]`.
	        fn send_call(c: u32, ) -> Weight {
		      // Minimum execution time: 19_000 nanoseconds.
		      Weight::from_ref_time(21_868_431)
			        // Standard Error: 1
			        .saturating_add(Weight::from_ref_time(824).saturating_mul(c.into()))
			        .saturating_add(T::DbWeight::get().reads(3))
			        .saturating_add(T::DbWeight::get().writes(1))
	        }
	            // Storage: ParachainInfo ParachainId (r:1 w:0)
	            // Storage: ParachainSystem HostConfiguration (r:1 w:0)
	            // Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	        fn transfer_assets() -> Weight {
		      // Minimum execution time: 19_000 nanoseconds.
		      Weight::from_ref_time(20_000_000)
			        .saturating_add(T::DbWeight::get().reads(3))
			        .saturating_add(T::DbWeight::get().writes(1))
	        }
  }

  // For backwards compatibility and tests
  impl WeightInfo for () {
	        // Storage: ParachainInfo ParachainId (r:1 w:0)
	        // Storage: ParachainSystem HostConfiguration (r:1 w:0)
	        // Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	        /// The range of component `c` is `[0, 100000]`.
	    fn send_call(c: u32, ) -> Weight {
		  // Minimum execution time: 19_000 nanoseconds.
		  Weight::from_ref_time(21_868_431)
			    // Standard Error: 1
			    .saturating_add(Weight::from_ref_time(824).saturating_mul(c.into()))
			    .saturating_add(RocksDbWeight::get().reads(3))
			    .saturating_add(RocksDbWeight::get().writes(1))
	    }
	        // Storage: ParachainInfo ParachainId (r:1 w:0)
	        // Storage: ParachainSystem HostConfiguration (r:1 w:0)
	        // Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	    fn transfer_assets() -> Weight {
		  // Minimum execution time: 19_000 nanoseconds.
		  Weight::from_ref_time(20_000_000)
			    .saturating_add(RocksDbWeight::get().reads(3))
			    .saturating_add(RocksDbWeight::get().writes(1))
	    }
  }
