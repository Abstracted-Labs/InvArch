
//! Autogenerated weights for `pallet_dao_staking`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2024-10-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `franciscos-mbp.lan`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// ./target/release/invarch-collator
// benchmark
// pallet
// --runtime
// ./target/release/wbuild/invarch-runtime/invarch_runtime.compact.compressed.wasm
// --wasm-execution=compiled
// --pallet=pallet_dao_staking
// --extrinsic=
// --steps
// 50
// --repeat
// 20
// --output=../pallets/pallet-dao-staking/src/weights.rs
// --template=../weights-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_dao_staking`.
pub trait WeightInfo {
	fn register_dao(n: u32, d: u32, i: u32, ) -> Weight;
	fn change_dao_metadata(n: u32, d: u32, i: u32, ) -> Weight;
	fn unregister_dao() -> Weight;
	fn stake() -> Weight;
	fn unstake() -> Weight;
	fn withdraw_unstaked() -> Weight;
	fn staker_claim_rewards() -> Weight;
	fn dao_claim_rewards() -> Weight;
	fn halt_unhalt_pallet() -> Weight;
	fn move_stake() -> Weight;
}

/// Weights for `pallet_dao_staking` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `OcifStaking::Halted` (r:1 w:0)
	/// Proof: `OcifStaking::Halted` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
	/// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::RegisteredCore` (r:1 w:1)
	/// Proof: `OcifStaking::RegisteredCore` (`max_values`: None, `max_size`: Some(477), added: 2952, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(85), added: 2560, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 20]`.
	/// The range of component `d` is `[0, 300]`.
	/// The range of component `i` is `[0, 100]`.
	fn register_dao(_n: u32, d: u32, _i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `52`
		//  Estimated: `3942`
		// Minimum execution time: 35_000_000 picoseconds.
		Weight::from_parts(36_286_192, 3942)
			// Standard Error: 187
			.saturating_add(Weight::from_parts(150, 0).saturating_mul(d.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `OcifStaking::Halted` (r:1 w:0)
	/// Proof: `OcifStaking::Halted` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::RegisteredCore` (r:1 w:1)
	/// Proof: `OcifStaking::RegisteredCore` (`max_values`: None, `max_size`: Some(477), added: 2952, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 20]`.
	/// The range of component `d` is `[0, 300]`.
	/// The range of component `i` is `[0, 100]`.
	fn change_dao_metadata(_n: u32, d: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5`
		//  Estimated: `3942`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_956_441, 3942)
			// Standard Error: 135
			.saturating_add(Weight::from_parts(790, 0).saturating_mul(d.into()))
			// Standard Error: 406
			.saturating_add(Weight::from_parts(1_341, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `OcifStaking::Halted` (r:1 w:0)
	/// Proof: `OcifStaking::Halted` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
	/// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::RegisteredCore` (r:1 w:1)
	/// Proof: `OcifStaking::RegisteredCore` (`max_values`: None, `max_size`: Some(477), added: 2952, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::CurrentEra` (r:1 w:0)
	/// Proof: `OcifStaking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::GeneralStakerInfo` (r:1 w:0)
	/// Proof: `OcifStaking::GeneralStakerInfo` (`max_values`: None, `max_size`: Some(269), added: 2744, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::CoreEraStake` (r:1 w:1)
	/// Proof: `OcifStaking::CoreEraStake` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::GeneralEraInfo` (r:1 w:1)
	/// Proof: `OcifStaking::GeneralEraInfo` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(85), added: 2560, mode: `MaxEncodedLen`)
	/// Storage: `MessageQueue::BookStateFor` (r:1 w:1)
	/// Proof: `MessageQueue::BookStateFor` (`max_values`: None, `max_size`: Some(55), added: 2530, mode: `MaxEncodedLen`)
	/// Storage: `MessageQueue::ServiceHead` (r:1 w:1)
	/// Proof: `MessageQueue::ServiceHead` (`max_values`: Some(1), `max_size`: Some(6), added: 501, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::UnregisteredCoreStakeInfo` (r:0 w:1)
	/// Proof: `OcifStaking::UnregisteredCoreStakeInfo` (`max_values`: None, `max_size`: Some(42), added: 2517, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::UnregisteredCoreStakers` (r:0 w:1)
	/// Proof: `OcifStaking::UnregisteredCoreStakers` (`max_values`: None, `max_size`: Some(320022), added: 322497, mode: `MaxEncodedLen`)
	/// Storage: `MessageQueue::Pages` (r:0 w:1)
	/// Proof: `MessageQueue::Pages` (`max_values`: None, `max_size`: Some(134194), added: 136669, mode: `MaxEncodedLen`)
	fn unregister_dao() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `113`
		//  Estimated: `3942`
		// Minimum execution time: 60_000_000 picoseconds.
		Weight::from_parts(61_000_000, 3942)
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(10_u64))
	}
	/// Storage: `OcifStaking::Halted` (r:1 w:0)
	/// Proof: `OcifStaking::Halted` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::RegisteredCore` (r:1 w:0)
	/// Proof: `OcifStaking::RegisteredCore` (`max_values`: None, `max_size`: Some(477), added: 2952, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::Ledger` (r:1 w:1)
	/// Proof: `OcifStaking::Ledger` (`max_values`: None, `max_size`: Some(265), added: 2740, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::CurrentEra` (r:1 w:0)
	/// Proof: `OcifStaking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::CoreEraStake` (r:1 w:1)
	/// Proof: `OcifStaking::CoreEraStake` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::GeneralStakerInfo` (r:1 w:1)
	/// Proof: `OcifStaking::GeneralStakerInfo` (`max_values`: None, `max_size`: Some(269), added: 2744, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::GeneralEraInfo` (r:1 w:1)
	/// Proof: `OcifStaking::GeneralEraInfo` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	fn stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5`
		//  Estimated: `4764`
		// Minimum execution time: 31_000_000 picoseconds.
		Weight::from_parts(32_000_000, 4764)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `OcifStaking::Halted` (r:1 w:0)
	/// Proof: `OcifStaking::Halted` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::RegisteredCore` (r:1 w:0)
	/// Proof: `OcifStaking::RegisteredCore` (`max_values`: None, `max_size`: Some(477), added: 2952, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::CurrentEra` (r:1 w:0)
	/// Proof: `OcifStaking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::GeneralStakerInfo` (r:1 w:1)
	/// Proof: `OcifStaking::GeneralStakerInfo` (`max_values`: None, `max_size`: Some(269), added: 2744, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::CoreEraStake` (r:1 w:1)
	/// Proof: `OcifStaking::CoreEraStake` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::Ledger` (r:1 w:1)
	/// Proof: `OcifStaking::Ledger` (`max_values`: None, `max_size`: Some(265), added: 2740, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::GeneralEraInfo` (r:1 w:1)
	/// Proof: `OcifStaking::GeneralEraInfo` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	fn unstake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `288`
		//  Estimated: `4764`
		// Minimum execution time: 33_000_000 picoseconds.
		Weight::from_parts(34_000_000, 4764)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `OcifStaking::Halted` (r:1 w:0)
	/// Proof: `OcifStaking::Halted` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::Ledger` (r:1 w:1)
	/// Proof: `OcifStaking::Ledger` (`max_values`: None, `max_size`: Some(265), added: 2740, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::CurrentEra` (r:1 w:0)
	/// Proof: `OcifStaking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::GeneralEraInfo` (r:1 w:1)
	/// Proof: `OcifStaking::GeneralEraInfo` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	fn withdraw_unstaked() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `546`
		//  Estimated: `4764`
		// Minimum execution time: 40_000_000 picoseconds.
		Weight::from_parts(45_000_000, 4764)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `OcifStaking::Halted` (r:1 w:0)
	/// Proof: `OcifStaking::Halted` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::GeneralStakerInfo` (r:1 w:1)
	/// Proof: `OcifStaking::GeneralStakerInfo` (`max_values`: None, `max_size`: Some(269), added: 2744, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::CurrentEra` (r:1 w:0)
	/// Proof: `OcifStaking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::CoreEraStake` (r:1 w:0)
	/// Proof: `OcifStaking::CoreEraStake` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::GeneralEraInfo` (r:1 w:0)
	/// Proof: `OcifStaking::GeneralEraInfo` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn staker_claim_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `213`
		//  Estimated: `3734`
		// Minimum execution time: 32_000_000 picoseconds.
		Weight::from_parts(33_000_000, 3734)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `OcifStaking::Halted` (r:1 w:0)
	/// Proof: `OcifStaking::Halted` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
	/// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::CurrentEra` (r:1 w:0)
	/// Proof: `OcifStaking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::CoreEraStake` (r:1 w:1)
	/// Proof: `OcifStaking::CoreEraStake` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::GeneralEraInfo` (r:1 w:0)
	/// Proof: `OcifStaking::GeneralEraInfo` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn dao_claim_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `249`
		//  Estimated: `6196`
		// Minimum execution time: 31_000_000 picoseconds.
		Weight::from_parts(32_000_000, 6196)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `OcifStaking::Halted` (r:1 w:1)
	/// Proof: `OcifStaking::Halted` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn halt_unhalt_pallet() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1486`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(4_000_000, 1486)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `OcifStaking::Halted` (r:1 w:0)
	/// Proof: `OcifStaking::Halted` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::RegisteredCore` (r:1 w:0)
	/// Proof: `OcifStaking::RegisteredCore` (`max_values`: None, `max_size`: Some(477), added: 2952, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::CurrentEra` (r:1 w:0)
	/// Proof: `OcifStaking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::GeneralStakerInfo` (r:2 w:2)
	/// Proof: `OcifStaking::GeneralStakerInfo` (`max_values`: None, `max_size`: Some(269), added: 2744, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::CoreEraStake` (r:2 w:2)
	/// Proof: `OcifStaking::CoreEraStake` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	fn move_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `217`
		//  Estimated: `6478`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(23_000_000, 6478)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `OcifStaking::Halted` (r:1 w:0)
	/// Proof: `OcifStaking::Halted` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
	/// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::RegisteredCore` (r:1 w:1)
	/// Proof: `OcifStaking::RegisteredCore` (`max_values`: None, `max_size`: Some(477), added: 2952, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(85), added: 2560, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 20]`.
	/// The range of component `d` is `[0, 300]`.
	/// The range of component `i` is `[0, 100]`.
	fn register_dao(_n: u32, d: u32, _i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `52`
		//  Estimated: `3942`
		// Minimum execution time: 35_000_000 picoseconds.
		Weight::from_parts(36_286_192, 3942)
			// Standard Error: 187
			.saturating_add(Weight::from_parts(150, 0).saturating_mul(d.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `OcifStaking::Halted` (r:1 w:0)
	/// Proof: `OcifStaking::Halted` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::RegisteredCore` (r:1 w:1)
	/// Proof: `OcifStaking::RegisteredCore` (`max_values`: None, `max_size`: Some(477), added: 2952, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 20]`.
	/// The range of component `d` is `[0, 300]`.
	/// The range of component `i` is `[0, 100]`.
	fn change_dao_metadata(_n: u32, d: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5`
		//  Estimated: `3942`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_956_441, 3942)
			// Standard Error: 135
			.saturating_add(Weight::from_parts(790, 0).saturating_mul(d.into()))
			// Standard Error: 406
			.saturating_add(Weight::from_parts(1_341, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `OcifStaking::Halted` (r:1 w:0)
	/// Proof: `OcifStaking::Halted` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
	/// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::RegisteredCore` (r:1 w:1)
	/// Proof: `OcifStaking::RegisteredCore` (`max_values`: None, `max_size`: Some(477), added: 2952, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::CurrentEra` (r:1 w:0)
	/// Proof: `OcifStaking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::GeneralStakerInfo` (r:1 w:0)
	/// Proof: `OcifStaking::GeneralStakerInfo` (`max_values`: None, `max_size`: Some(269), added: 2744, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::CoreEraStake` (r:1 w:1)
	/// Proof: `OcifStaking::CoreEraStake` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::GeneralEraInfo` (r:1 w:1)
	/// Proof: `OcifStaking::GeneralEraInfo` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(85), added: 2560, mode: `MaxEncodedLen`)
	/// Storage: `MessageQueue::BookStateFor` (r:1 w:1)
	/// Proof: `MessageQueue::BookStateFor` (`max_values`: None, `max_size`: Some(55), added: 2530, mode: `MaxEncodedLen`)
	/// Storage: `MessageQueue::ServiceHead` (r:1 w:1)
	/// Proof: `MessageQueue::ServiceHead` (`max_values`: Some(1), `max_size`: Some(6), added: 501, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::UnregisteredCoreStakeInfo` (r:0 w:1)
	/// Proof: `OcifStaking::UnregisteredCoreStakeInfo` (`max_values`: None, `max_size`: Some(42), added: 2517, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::UnregisteredCoreStakers` (r:0 w:1)
	/// Proof: `OcifStaking::UnregisteredCoreStakers` (`max_values`: None, `max_size`: Some(320022), added: 322497, mode: `MaxEncodedLen`)
	/// Storage: `MessageQueue::Pages` (r:0 w:1)
	/// Proof: `MessageQueue::Pages` (`max_values`: None, `max_size`: Some(134194), added: 136669, mode: `MaxEncodedLen`)
	fn unregister_dao() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `113`
		//  Estimated: `3942`
		// Minimum execution time: 60_000_000 picoseconds.
		Weight::from_parts(61_000_000, 3942)
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().writes(10_u64))
	}
	/// Storage: `OcifStaking::Halted` (r:1 w:0)
	/// Proof: `OcifStaking::Halted` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::RegisteredCore` (r:1 w:0)
	/// Proof: `OcifStaking::RegisteredCore` (`max_values`: None, `max_size`: Some(477), added: 2952, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::Ledger` (r:1 w:1)
	/// Proof: `OcifStaking::Ledger` (`max_values`: None, `max_size`: Some(265), added: 2740, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::CurrentEra` (r:1 w:0)
	/// Proof: `OcifStaking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::CoreEraStake` (r:1 w:1)
	/// Proof: `OcifStaking::CoreEraStake` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::GeneralStakerInfo` (r:1 w:1)
	/// Proof: `OcifStaking::GeneralStakerInfo` (`max_values`: None, `max_size`: Some(269), added: 2744, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::GeneralEraInfo` (r:1 w:1)
	/// Proof: `OcifStaking::GeneralEraInfo` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	fn stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5`
		//  Estimated: `4764`
		// Minimum execution time: 31_000_000 picoseconds.
		Weight::from_parts(32_000_000, 4764)
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `OcifStaking::Halted` (r:1 w:0)
	/// Proof: `OcifStaking::Halted` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::RegisteredCore` (r:1 w:0)
	/// Proof: `OcifStaking::RegisteredCore` (`max_values`: None, `max_size`: Some(477), added: 2952, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::CurrentEra` (r:1 w:0)
	/// Proof: `OcifStaking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::GeneralStakerInfo` (r:1 w:1)
	/// Proof: `OcifStaking::GeneralStakerInfo` (`max_values`: None, `max_size`: Some(269), added: 2744, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::CoreEraStake` (r:1 w:1)
	/// Proof: `OcifStaking::CoreEraStake` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::Ledger` (r:1 w:1)
	/// Proof: `OcifStaking::Ledger` (`max_values`: None, `max_size`: Some(265), added: 2740, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::GeneralEraInfo` (r:1 w:1)
	/// Proof: `OcifStaking::GeneralEraInfo` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	fn unstake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `288`
		//  Estimated: `4764`
		// Minimum execution time: 33_000_000 picoseconds.
		Weight::from_parts(34_000_000, 4764)
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `OcifStaking::Halted` (r:1 w:0)
	/// Proof: `OcifStaking::Halted` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::Ledger` (r:1 w:1)
	/// Proof: `OcifStaking::Ledger` (`max_values`: None, `max_size`: Some(265), added: 2740, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::CurrentEra` (r:1 w:0)
	/// Proof: `OcifStaking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::GeneralEraInfo` (r:1 w:1)
	/// Proof: `OcifStaking::GeneralEraInfo` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	fn withdraw_unstaked() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `546`
		//  Estimated: `4764`
		// Minimum execution time: 40_000_000 picoseconds.
		Weight::from_parts(45_000_000, 4764)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `OcifStaking::Halted` (r:1 w:0)
	/// Proof: `OcifStaking::Halted` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::GeneralStakerInfo` (r:1 w:1)
	/// Proof: `OcifStaking::GeneralStakerInfo` (`max_values`: None, `max_size`: Some(269), added: 2744, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::CurrentEra` (r:1 w:0)
	/// Proof: `OcifStaking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::CoreEraStake` (r:1 w:0)
	/// Proof: `OcifStaking::CoreEraStake` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::GeneralEraInfo` (r:1 w:0)
	/// Proof: `OcifStaking::GeneralEraInfo` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn staker_claim_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `213`
		//  Estimated: `3734`
		// Minimum execution time: 32_000_000 picoseconds.
		Weight::from_parts(33_000_000, 3734)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `OcifStaking::Halted` (r:1 w:0)
	/// Proof: `OcifStaking::Halted` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
	/// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::CurrentEra` (r:1 w:0)
	/// Proof: `OcifStaking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::CoreEraStake` (r:1 w:1)
	/// Proof: `OcifStaking::CoreEraStake` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::GeneralEraInfo` (r:1 w:0)
	/// Proof: `OcifStaking::GeneralEraInfo` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn dao_claim_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `249`
		//  Estimated: `6196`
		// Minimum execution time: 31_000_000 picoseconds.
		Weight::from_parts(32_000_000, 6196)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `OcifStaking::Halted` (r:1 w:1)
	/// Proof: `OcifStaking::Halted` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn halt_unhalt_pallet() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1486`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(4_000_000, 1486)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `OcifStaking::Halted` (r:1 w:0)
	/// Proof: `OcifStaking::Halted` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::RegisteredCore` (r:1 w:0)
	/// Proof: `OcifStaking::RegisteredCore` (`max_values`: None, `max_size`: Some(477), added: 2952, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::CurrentEra` (r:1 w:0)
	/// Proof: `OcifStaking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::GeneralStakerInfo` (r:2 w:2)
	/// Proof: `OcifStaking::GeneralStakerInfo` (`max_values`: None, `max_size`: Some(269), added: 2744, mode: `MaxEncodedLen`)
	/// Storage: `OcifStaking::CoreEraStake` (r:2 w:2)
	/// Proof: `OcifStaking::CoreEraStake` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	fn move_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `217`
		//  Estimated: `6478`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(23_000_000, 6478)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
}
